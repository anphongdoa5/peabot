# bot.py
from distutils.cmd import Command
from importlib.metadata import requires
from math import perm
from optparse import Option
import os
import random
from typing import Any, Text
from unicodedata import name
from urllib import response
import discord
from discord import channel
from discord import message
from discord import embeds
from discord import user
from discord import member
from discord import app_commands
from discord.ext import commands
from discord.ext.commands import MissingPermissions
from dotenv import load_dotenv
from datetime import datetime
from dotenv.main import with_warn_for_invalid_lines
import requests
from discord.utils import get
from discord.ext import commands
import aiohttp
from discord_together import DiscordTogether
import pytz
from translate import Translator
import interactions
from typing import List
import wikipedia



#
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN2')

#setup ready run
class aclient(discord.Client):
    def __init__(self):
        super().__init__(intents=discord.Intents.default())
        self.synced = False
    
    async def on_ready(self):
        await self.wait_until_ready()
        if not self.synced:
            await tree.sync()
            self.synced = True
        print(f"{client.user.name} ƒë√£ k·∫øt n·ªëi t·ªõi Discord")
        client.togetherControl = await DiscordTogether(TOKEN)

        activity = discord.Game(name='/help ƒë·ªÉ nh·∫≠n h·ªó tr·ª£', type=3)
        await client.change_presence(status=discord.Status.online, activity=activity)


client = aclient()
tree = app_commands.CommandTree(client)



#commands list
@tree.command(name="help", description = "Xem t·∫•t c·∫£ c√°c l·ªánh c·ªßa bot")
async def self(interaction: discord.Interaction):
    myembed = discord.Embed (title = 'Peanutss Bot (v3.0)', description = 'S·ª≠ d·ª•ng `/[l·ªánh]` ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi bot', color = discord.Color.gold())
    myembed.set_author (name = "Danh S√°ch L·ªánh")
    myembed.add_field (name = "üí¨ T∆∞∆°ng T√°c - (4)", value = "`s·ªë-may-m·∫Øn` `covid19` `covid19vn` `m√°y-t√≠nh-tu·ªïi`", inline=False)
    myembed.add_field (name = "üòä Fun - (15)", value = " `vƒÉn-m·∫´u` `hug` `smile` `kill` `cry` `kiss` `highfive` `pat` `smug` `bonk` `lick` `awoo` `blush` `wave` `slap`", inline=False)
    myembed.add_field (name = "üéÅ Media - (7)", value = "`meme` `darkmeme` `girl` `cat` `dog` `food` `waifu` ", inline=False)
    myembed.add_field (name = "üì∫ Gi·∫£i Tr√≠ - (2)", value = "`action` `youtube`", inline=False)
    myembed.add_field (name = "üîû NSFW - (1)", value = "`hentai`", inline=False)
    myembed.add_field (name = "ü™ô Ti·ªÅn T·ªá - (1)", value = "`binance`", inline=False)
    myembed.add_field (name = "‚ö†Ô∏èQu·∫£n L√≠ - (3)", value = "`kick` `ban` `unban`: Comming Soon", inline=False)
    myembed.add_field (name = "üí° T√≠nh NƒÉng B·ªï Tr·ª£ - (2)", value = "`d·ªãch` `s·∫Øp-t·∫øt`", inline=False)
    myembed.add_field (name = "‚öôÔ∏è Guilds - (4)", value = "`ping` `help` `server-status` `server-avatar`", inline=False)
    myembed.add_field (name = "‚òéÔ∏è Contact - (3):", value = "`contact` `donate` `invite`", inline=False)
    myembed.set_footer(text="Big Update: Chuy·ªÉn to√†n b·ªô c√°c c√¢u l·ªánh sang Slash Commands {/}")
    await interaction.response.send_message(embed = myembed, ephemeral = False)


#
@tree.command(name="m√°y-t√≠nh-tu·ªïi-th√¥ng-minh", description = "D√πng ƒë·ªÉ t√≠nh to√°n tu·ªïi c·ªßa b·∫°n")
async def self(interaction: discord.Interaction, nhap_tuoi: str):
    await interaction.response.send_message(f"B·∫°n ƒë√£ {nhap_tuoi} tu·ªïi r·ªìi", ephemeral = False)

#

@tree.command(name="m√°y-t√≠nh-chi·ªÅu-cao", description = "D√πng ƒë·ªÉ t√≠nh to√°n chi·ªÅu cao c·ªßa b·∫°n (nh·∫≠p s·ªë centimet)")
async def self(interaction: discord.Interaction, nhap_chieu_cao: int):
    await interaction.response.send_message(f"B·∫°n cao {nhap_chieu_cao}cm ", ephemeral = False)
    
    
######
@tree.command(name="meme", description = "G·ª≠i cho b·∫°n m·ªôt meme")
async def self(interaction: discord.Interaction):
    async with aiohttp.ClientSession() as cs:
        async with cs.get("https://www.reddit.com/r/memes.json") as r:
            memes = await r.json()
            memeembed = discord.Embed(color = discord.Color.green())
            memeembed.set_image(url=memes["data"]["children"][random.randint(0, 25)]["data"]["url"])
            memeembed.set_footer(text=f"Meme c·ªßa m·ªçi nh√†")
    await interaction.response.send_message(embed = memeembed, ephemeral = False)


######
@tree.command(name="darkmeme", description = "G·ª≠i cho b·∫°n m·ªôt darkmeme")
async def self(interaction: discord.Interaction):
    async with aiohttp.ClientSession() as cs:
        async with cs.get("https://www.reddit.com/r/dankmemes/new.json?sort=hot") as r:
            darkmemes = await r.json()
            darkembed = discord.Embed(color = discord.Color.red())
            darkembed.set_image(url=darkmemes["data"]["children"][random.randint(0, 25)]["data"]["url"])
            darkembed.set_footer(text=f"ƒê·∫£k M√™m")
    await interaction.response.send_message(embed = darkembed, ephemeral = False)

######
@tree.command(name="s·ªë-may-m·∫Øn", description = "Cho b·∫°n m·ªôt con s·ªë may m·∫Øn trong ng√†y")
async def self(interaction: discord.Interaction):
    lknum = random.randint(1,99)
    peabot_rep = 'Con s·ªë may m·∫Øn h√¥m nay c·ªßa b·∫°n l√†: ' + str(lknum) + ' ü•≥' 

    await interaction.response.send_message(f'{peabot_rep}\n Nh·ªõ c·∫ßm l·∫•y n√≥ ƒëi ƒë√°nh ƒë·ªÅ nh√© XD ^^')

######
@tree.command(name="cat", description = "G·ª≠i cho b·∫°n m·ªôt t·∫•m h√¨nh m√®o")
async def self(interaction: discord.Interaction):
    async with aiohttp.ClientSession() as cs:
    #api ƒëu·ªìi b·∫ßu g·∫Øn url trong 1 list, ph·∫£i t√°ch b·∫±ng 1 int ch·ª© kh√¥ng th·ªÉ t√°ch nh∆∞ th∆∞·ªùng
        async with cs.get("https://api.thecatapi.com/v1/images/search") as r:
            cats = await r.json()

            catch = cats[0] #tr·∫£ v·ªÅ d√£y nh∆∞ api th∆∞·ªùng (m·∫•t [])
            catlink = catch['url'] #t√°ch data nh∆∞ th∆∞·ªùng

            catembed = discord.Embed(color = discord.Color.blue())
            catembed.set_image(url=catlink)
            catembed.set_footer(text=f"M√®o m√©o meo m√®o meo")
        
    await interaction.response.send_message(embed = catembed, ephemeral = False)


######
@tree.command(name="dog", description = "G·ª≠i cho b·∫°n m·ªôt b·ª©c h√¨nh ch√≥")
async def self(interaction: discord.Interaction):
    async with aiohttp.ClientSession() as cs:
        async with cs.get("https://dog.ceo/api/breeds/image/random") as r:
            dogs = await r.json()
            dogsembed = discord.Embed(color = discord.Color.gold())
            dogsembed.set_image(url=dogs["message"])
            dogsembed.set_footer(text=f"Cute Dogs :3")
    await interaction.response.send_message(embed = dogsembed, ephemeral = False)


######
@tree.command(name="food", description = "G·ª≠i cho b·∫°n m·ªôt b·ª©c h√¨nh to√†n l√† ƒë·ªì ƒÉn")
async def self(interaction: discord.Interaction):       
    async with aiohttp.ClientSession() as cs:
        async with cs.get("https://www.reddit.com/r/food/new.json?sort=hot") as r:
            foods = await r.json()
            foodsembed = discord.Embed(color = discord.Color.green())
            foodsembed.set_image(url=foods["data"]["children"][random.randint(0, 25)]["data"]["url"])
            foodsembed.set_footer(text=f'Mlem mlem')
    await interaction.response.send_message(embed = foodsembed, ephemeral = False)

######
@tree.command(name="waifu", description = "G·ª≠i cho b·∫°n m·ªôt b·ª©c h√¨nh waifu")
async def self(interaction: discord.Interaction):       
    async with aiohttp.ClientSession() as cs:
        async with cs.get("https://api.waifu.pics/sfw/waifu") as r:
            waifu = await r.json()
            waifuembed = discord.Embed(color = discord.Color.dark_orange())
            waifuembed.set_image(url=waifu["url"])
            waifuembed.set_footer(text=f"Who is your waifu? ‚ù§Ô∏è")
    await interaction.response.send_message(embed = waifuembed, ephemeral = False)


######
@tree.command(name="hentai", description = "L·ªánh ch·ªâ ƒë∆∞·ª£c d√πng trong ph√≤ng c√≥ tag NSFW 'waifu', 'neko', 'blowjob'", nsfw = 'true')
async def hentai(interaction: discord.Interaction, style: str):
        link = "https://api.waifu.pics/nsfw/"
        fullurl = link + style
        async with aiohttp.ClientSession() as cs:
            async with cs.get(fullurl) as r:
                nsfw = await r.json()
                nsfwembed = discord.Embed(color = discord.Color.dark_red())
                nsfwembed.set_image(url=nsfw["url"])
                nsfwembed.set_footer(text=f"‚ö†Ô∏è| Not Safe For Work!!")
                await interaction.response.send_message(embed = nsfwembed, ephemeral = False)


@hentai.autocomplete('style')
async def hentai_autocomplete(
    interaction: discord.Interaction,
    current: str,
) -> List[app_commands.Choice[str]]:
    style = ['waifu','neko','blowjob']
    return [
        app_commands.Choice(name=stl, value=stl)
        for stl in style if current.lower() in stl.lower()
        ]

#######
@tree.command(name="girl", description = "G·ª≠i cho b·∫°n nh·ªØng b·ª©c h√¨nh thattuoimat‚ù§Ô∏è")
async def self(interaction: discord.Interaction):

    lines = open('list_girl.txt').read().splitlines()
    link = random.choice(lines)
   
    girlembed = discord.Embed(color = discord.Color.from_rgb(255,105,180))
    girlembed.set_image(url=link)
    girlembed.set_footer(text=f"M·ªói b·ª©c ·∫£nh, m·ªôt ni·ªÅm vui ‚ù§Ô∏è")
    await interaction.response.send_message(embed = girlembed, ephemeral = False)


@tree.command(name="youtube", description = "Xem Youtube tr·ª±c ti·∫øp tr√™n Discord")
async def youtube(interaction: discord.Interaction, member :  discord.Member):
    channel = member.voice.channel
    if channel:   #ki·ªÉm tra ng∆∞·ªùi trong voice 
        await channel.connect()
        #t·∫°o url youtube together
        #link = await client.togetherControl.create_link(interaction.author.voice.channel.id, 'youtube')
        #await interaction.response.send_message(f'Nh·∫•n v√†o link ƒë·ªÉ xem Youtube: {link}', ephemeral = False)
        #await interaction.response.send_message('L∆∞u √ù: Ch·ª©c nƒÉng ch·ªâ ho·∫°t ƒë·ªông tr√™n c√°c thi·∫øt b·ªã PC - Laptop, kh√¥ng h·ªó tr·ª£ cho c√°c thi·∫øt b·ªã ƒëi·ªán tho·∫°i!!', ephemeral = False)  
    else:
        await interaction.response.send_message('‚ùå| B·∫°n ph·∫£i v√†o k√™nh voice tr∆∞·ªõc!!', ephemeral = False)



@tree.command(name="s·∫Øp-t·∫øt", description = "ƒê·∫øm ng∆∞·ª£c ng√†y ƒë·∫øn T·∫øt Nguy√™n ƒê√°n")
async def self(interaction: discord.Interaction):   
    #set up ngay den tet
    ngay_tet = datetime.strptime('Jan 22 2023 00:00', '%b %d %Y %H:%M') 
    hom_nay = datetime.now(pytz.timezone('Asia/Ho_Chi_Minh')) #set timezone v·ªÅ VN
    count = int((ngay_tet - hom_nay.replace(tzinfo=None)).total_seconds())

    #dem ngay gio
    ngay = count//86400
    gio = (count-ngay*86400)//3600
    phut = (count-ngay*86400-gio*3600)//60
    giay = count-ngay*86400-gio*3600-phut*60
    await interaction.response.send_message(f"Ch·ªâ c√≤n **{ngay}** ng√†y **{gio}** gi·ªù **{phut}** ph√∫t **{giay}** gi√¢y n·ªØa l√† ƒë·∫øn t·∫øt 2023 r·ªìi!!!!", ephemeral = False) 

##########
@tree.command(name = "d·ªãch", description = "D·ªãch b·∫•t c·ª© ng√¥n ng·ªØ n√†o tr√™n th·∫ø gi·ªõi: en, ja, vi,...")
async def translate(interaction: discord.Interaction, input_lang: str, output_lang: str, noidung: str):
    #khai bao language
    if input_lang == "Ti·∫øng Vi·ªát":
        in_lang = 'vi'
    if input_lang == "Ti·∫øng Anh":
        in_lang = 'en'
    if input_lang == "Ti·∫øng Nh·∫≠t":
        in_lang = 'ja'
    if input_lang == "Ti·∫øng Trung (Ph·ªìn Th·ªÉ)":
        in_lang = 'zh-tw'
    if input_lang == "Ti·∫øng Trung (Gi·∫£n Th·ªÉ)":
        in_lang = 'zh-cn'
    if input_lang == "Ti·∫øng Indo":
        in_lang = 'id'
    if input_lang == "Ti·∫øng H√†n":
        in_lang = 'ko'
    if input_lang == "Ti·∫øng Th√°i":
        in_lang = 'th'
    if input_lang == "Ti·∫øng ƒê·ª©c":
        in_lang = 'de'
    if input_lang == "Ti·∫øng Ph√°p":
        in_lang = 'fr'
    if input_lang == "Ti·∫øng Nga":
        in_lang = 'ru'
    if input_lang == "Ti·∫øng T√¢y Ban Nha":
        in_lang = 'es'
    if input_lang == "Ti·∫øng √ù":
        in_lang = 'it'

#output lang
    if output_lang == "Ti·∫øng Vi·ªát":
        out_lang = 'vi'
    if output_lang == "Ti·∫øng Anh":
        out_lang = 'en'
    if output_lang == "Ti·∫øng Nh·∫≠t":
        out_lang = 'ja'
    if output_lang == "Ti·∫øng Trung (Ph·ªìn Th·ªÉ)":
        out_lang = 'zh-tw'
    if output_lang == "Ti·∫øng Trung (Gi·∫£n Th·ªÉ)":
        out_lang = 'zh-cn'
    if output_lang == "Ti·∫øng Indo":
        out_lang = 'id'
    if output_lang == "Ti·∫øng H√†n":
        out_lang = 'ko'
    if output_lang == "Ti·∫øng Th√°i":
        out_lang = 'th'
    if output_lang == "Ti·∫øng ƒê·ª©c":
        output_lang = 'de'
    if output_lang == "Ti·∫øng Ph√°p":
        out_lang = 'fr'
    if output_lang == "Ti·∫øng Nga":
        out_lang = 'ru'
    if output_lang == "Ti·∫øng T√¢y Ban Nha":
        out_lang = 'es'
    if output_lang == "Ti·∫øng √ù":
        out_lang = 'it'
    translator = Translator(from_lang=f"{in_lang}", to_lang=f"{out_lang}")
    result = translator.translate(noidung)

    dich_embed = discord.Embed (title = f'K·∫øt qu·∫£ d·ªãch t·ª´ {input_lang} sang {output_lang}:', color = discord.Color.green())
    dich_embed.add_field (name = 'VƒÉn B·∫£n G·ªëc:', value = noidung, inline = False)
    dich_embed.add_field (name = 'VƒÉn B·∫£n Sau Khi D·ªãch: ', value = result, inline = False)
    dich_embed.set_footer (text = f'L·ªánh ƒë∆∞·ª£c th·ª±c hi·ªán b·ªüi: {interaction.user}')
    await interaction.response.send_message(embed = dich_embed, ephemeral = False)

@translate.autocomplete('input_lang')
async def translate_autocomplete(
    interaction: discord.Interaction,
    current: str,
) -> List[app_commands.Choice[str]]:
    input_lang = ['Ti·∫øng Vi·ªát', 'Ti·∫øng Anh', 'Ti·∫øng Nh·∫≠t', 'Ti·∫øng Trung (Ph·ªìn Th·ªÉ)','Ti·∫øng Trung (Gi·∫£n Th·ªÉ)', 'Ti·∫øng Indo', 'Ti·∫øng H√†n', 'Ti·∫øng Th√°i', 'Ti·∫øng ƒê·ª©c', 'Ti·∫øng Ph√°p', 'Ti·∫øng Nga', 'Ti·∫øng T√¢y Ban Nha', 'Ti·∫øng √ù']
    return [
        app_commands.Choice(name=lang, value=lang)
        for lang in input_lang if current.lower() in lang.lower()
        ]

@translate.autocomplete('output_lang')
async def translate_autocomplete(
    interaction: discord.Interaction,
    current: str,
) -> List[app_commands.Choice[str]]:
    output_lang = ['Ti·∫øng Vi·ªát', 'Ti·∫øng Anh', 'Ti·∫øng Nh·∫≠t', 'Ti·∫øng Trung (Ph·ªìn Th·ªÉ)','Ti·∫øng Trung (Gi·∫£n Th·ªÉ)', 'Ti·∫øng Indo', 'Ti·∫øng H√†n', 'Ti·∫øng Th√°i', 'Ti·∫øng ƒê·ª©c', 'Ti·∫øng Ph√°p', 'Ti·∫øng Nga', 'Ti·∫øng T√¢y Ban Nha', 'Ti·∫øng √ù']
    return [
        app_commands.Choice(name=lang, value=lang)
        for lang in output_lang if current.lower() in lang.lower()
    ]
##########

#
@tree.command(name="contact", description = "Th√¥ng tin li√™n h·ªá v·ªõi Developer")
async def self(interaction: discord.Interaction):   
    contactembed = discord.Embed (color = discord.Color.dark_grey())
    contactembed.set_author (name = "Li√™n h·ªá v·ªõi Dev t·∫°i:")
    contactembed.add_field (name = "Discord Account ^^:", value = 'Peanuts Is Me (Andy)#2757', inline=False)
    contactembed.add_field (name = "Link Facebook ^^:", value = 'https://facebook.com/yt.andymusic', inline=False)
    contactembed.add_field (name = "Website ^^:", value = 'https://peanutssbot.tk', inline=False)
    contactembed.add_field (name = "Link Youtube ^^:", value = 'https://youtube.com/c/andymusicc', inline=False)
    contactembed.add_field (name = "Github:", value = 'https://github.com/anphongdoa5', inline=False)
    await interaction.response.send_message(embed = contactembed, ephemeral = False)

#
@tree.command(name="ping", description = "Ki·ªÉm tra ƒë·ªô tr·ªÖ c·ªßa bot")
async def self(interaction: discord.Interaction):
    await interaction.response.send_message(f'Pong! ƒê·ªô tr·ªÖ c·ªßa t·ªõ l√† {round(client.latency * 1000)}ms')

#
@tree.command(name="donate", description = "·ª¶ng h·ªô Developer m·ªôt v√†i ly cafe")
async def self(interaction: discord.Interaction):
    donateembed = discord.Embed (title = 'Playerduo Link:', color = discord.Color.orange())
    donateembed.set_author (name = "Donate ·ªßng h·ªô Dev ly c√† ph√™ t·∫°i ƒë√¢y:")
    donateembed.add_field (name = "https://playerduo.com/peanutss", value = "C·∫£m ∆°n b·∫°n r·∫•t nhi·ªÅu <3", inline=False)
    await interaction.response.send_message(embed = donateembed, ephemeral = False)

#
@tree.command(name="covid19vn", description = "Xem t√¨nh h√¨nh, di·ªÖn bi·∫øn d·ªãch COVID-19 t·∫°i Vi·ªát Nam")
async def self(interaction: discord.Interaction):
    response = requests.get('http://coronavirus-19-api.herokuapp.com/countries/vietnam')
    data = response.json()
    cases = data['cases']
    deaths = data['deaths']
    recovered = data['recovered']
    peabot_rep = f"T√åNH H√åNH COVID 19 T·∫†I VI·ªÜT NAM:\n‚ò£  S·ªë Ng∆∞·ªùi Nhi·ªÖm: {cases} ng∆∞·ªùi\nüíÄ  S·ªë Ng∆∞·ªùi T·ª≠ Vong: {deaths} ng∆∞·ªùi\n‚úÖ  S·ªë Ng∆∞·ªùi B√¨nh Ph·ª•c: {recovered} ng∆∞·ªùi"
    await interaction.response.send_message(peabot_rep, ephemeral = False)

#
@tree.command(name="covid19", description = "Xem t√¨nh h√¨nh, di·ªÖn bi·∫øn d·ªãch COVID-19 tr√™n to√†n th·∫ø gi·ªõi")
async def self(interaction: discord.Interaction):
    response = requests.get('http://coronavirus-19-api.herokuapp.com/countries/world')
    data = response.json()
    cases = data['cases']
    deaths = data['deaths']
    recovered = data['recovered']
    peabot_rep = f"T√åNH H√åNH COVID 19 TR√äN TH·∫æ GI·ªöI:\n‚ò£  S·ªë Ng∆∞·ªùi Nhi·ªÖm: {cases} ng∆∞·ªùi\nüíÄ  S·ªë Ng∆∞·ªùi T·ª≠ Vong: {deaths} ng∆∞·ªùi\n‚úÖ  S·ªë Ng∆∞·ªùi B√¨nh Ph·ª•c: {recovered} ng∆∞·ªùi"
    await interaction.response.send_message(peabot_rep, ephemeral = False)

#
@tree.command(name="invite", description = "L·∫•y link m·ªùi bot v√†o server")
async def self(interaction: discord.Interaction):
    inviteembed = discord.Embed (color = discord.Color.green())
    inviteembed.set_author (name = "Link Invite Peanutss Bot")
    inviteembed.add_field (name = "Link:", value = 'https://discord.com/oauth2/authorize?client_id=728462830407254088&permissions=34631477334&scope=bot', inline=False)
    await interaction.response.send_message(embed = inviteembed, ephemeral = False)

#
@tree.command(name="server-status", description = "Ki·ªÉm tra th√¥ng tin c·ªßa server")
async def self(interaction: discord.Interaction):
    statembed = discord.Embed(title=f'Th√¥ng tin server {interaction.guild.name} ',description= '', color = discord.Color.from_rgb(147,112,219))
    statembed.set_thumbnail(url=f'{interaction.guild.icon}')

    statembed.add_field(name='T√™n Server:', value=f'{interaction.guild.name}', inline=True)
    statembed.add_field(name='S·ªë L∆∞·ª£ng Th√†nh Vi√™n:', value=f'{interaction.guild.member_count} th√†nh vi√™n', inline=True)
    statembed.add_field(name='Ch·ªß Server:', value=f'<@{interaction.guild.owner_id}>', inline=True)
    statembed.add_field(name='Server T·∫°o L√∫c:', value=f'{interaction.guild.created_at.strftime("%#d %B %Y, %H:%M")}')

    statembed.add_field(name='Tr·∫°ng Th√°i Bot:', value='üü¢ Online!!', inline = True)
    statembed.add_field(name='Latency:', value=f'ƒê·ªô tr·ªÖ bot: {round(client.latency * 1000)}ms', inline=True)
    statembed.set_footer(text=f'B·ªüi: {interaction.user}!')

    await interaction.response.send_message(embed = statembed, ephemeral = False)

#
@tree.command(name="server-avatar", description = "Xem ·∫£nh ƒë·∫°i di·ªán c·ªßa server")
async def self(interaction: discord.Interaction):
    avaembed = discord.Embed(title=f'Avatar c·ªßa server {interaction.guild.name}', description='', color = discord.Color.from_rgb(0,201,87))
    avaembed.set_image(url=f'{interaction.guild.icon}')
    avaembed.set_footer(text=f'B·ªüi: {interaction.user}!')
    await interaction.response.send_message(embed = avaembed, ephemeral = False)

#
@tree.command(name = "binance", description = "Ki·ªÉm tra gi√° tr·ªã c√°c ƒë·ªìng ti·ªÅn ·∫£o")
async def binance(interaction: discord.Interaction, coin_name: str):

    if coin_name == "Bitcoin (BTC)":
        coin_position = 0
    if coin_name == "Ethereum (ETH)":
        coin_position = 1
    if  coin_name == "Doge Coin (DOGE)":
        coin_position = 9
    if coin_name == "Shiba Inu (SHIB)":
        coin_position = 11
    if coin_name == "Ethereum Classic (ETC)":
        coin_position = 19
    
    coin_api = requests.get('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd')
    tach_json_coin = coin_api.json()
    coin_data = tach_json_coin[coin_position] 
    coin_price = coin_data["current_price"]

    await interaction.response.send_message(f'T·ªâ gi√° ƒë·ªìng **{coin_name}** hi·ªán t·∫°i l√†: **{coin_price} USD/1 {coin_name}**', ephemeral = False)
  
@binance.autocomplete('coin_name')
async def binance_autocomplete(
    interaction: discord.Interaction,
    current: str,
) -> List[app_commands.Choice[str]]:
    coin_name = ['Bitcoin (BTC)', 'Ethereum (ETH)', 'Doge Coin (DOGE)', 'Shiba Inu (SHIB)', 'Ethereum Classic (ETC)']
    return [
        app_commands.Choice(name=binan, value=binan)
        for binan in coin_name if current.lower() in binan.lower()
    ]



#
@tree.command(name = "h√†nh-ƒë·ªông", description = "...")
async def action_module(interaction: discord.Interaction, hanh_dong: str, tin_nhan: str):
    async with aiohttp.ClientSession() as cs:
        async with cs.get(f"https://api.waifu.pics/sfw/{hanh_dong}") as r:
            action = await r.json()
            actionembed = discord.Embed(color = discord.Color.from_rgb(127,255,212))
            actionembed.set_image(url=action["url"])
            actionembed.set_footer(text=f"{tin_nhan} ...‚ù§Ô∏è")
            await interaction.response.send_message(embed = actionembed, ephemeral = False)

@action_module.autocomplete('hanh_dong')
async def action_module_autocomplete(
    interaction: discord.Interaction,
    current: str,
) -> List[app_commands.Choice[str]]:
    hanh_dong = ['kiss', 'hug', 'cry', 'smile', 'highfive', 'kill', 'pat', 'smug', 'bonk', 'lick', 'awoo', 'blush', 'wave', 'slap']
    return [
        app_commands.Choice(name=act, value=act)
        for act in hanh_dong if current.lower() in act.lower()
    ]

@tree.command(name = "vƒÉn-m·∫´u", description = "T·∫°o ra nh·ªØng b√†i vƒÉn m·∫´u c√≥ gi√° tr·ªã theo th·ªùi gian")
async def action_module(interaction: discord.Interaction):
    peabot_rep = [
        'B·∫Øn CSGO c≈©ng gi·ªëng nh∆∞ ƒëi t·ª´ thi·ªán v·∫≠y, c√°i t√¢m ph·∫£i ƒë·∫∑t l√™n ƒë·∫ßu',
        'ƒê·∫∑t c√¢u h·ªèi l√† t·ªët nh∆∞ng c√°i g√¨ c≈©ng h·ªèi th√¨ kh√¥ng',
        'Sau n√†y, ch·ªâ c√≥ l√†m th√¨ m·ªõi c√≥ ƒÉn. Nh·ªØng c√°i lo·∫°i kh√¥ng l√†m m√† ƒë√≤i c√≥ ƒÉn th√¨ ch·ªâ c√≥ ƒÉn ||ƒë·∫ßu bu·ªìi|| ƒÉn ||c·ª©t||',
        'Nh·ªØng c√°i lo·∫°i ng·ªß qu√° gi·ªù tr∆∞a th√¨ kh√¥ng gi√†u ƒë∆∞·ª£c ƒë√¢u',
        'Nam t·ª≠ h√°n ƒë·∫°i tr∆∞·ª£ng phu, ƒë√°nh nhau kh√¥ng l·∫°i ||b√∫ cu|| gi·∫£ng h√≤a',
        'T√¥i c√≥ th·∫±ng em sinh nƒÉm 96 h·ªçc B√°ch Khoa C∆° Kh√≠ tay ngang sang h·ªçc IT...',
        'H·∫£o h√°nnnn',    
        'Bao l√¢u th√¨ b√°n ƒë∆∞·ª£c 1 t·ªâ g√≥i m√®? Tr·∫£ l·ªùi?',
        'H·ªçc ƒë·∫øm: 1 - Ng√¥ Di·ªác Ph√†m - 3 - 4 - 5 - 6 - 7...',
        'B·∫°n kh√¥ng c√≥ m·ªôt ch√∫t vƒÉn ho√° n√†o, b·∫°n kh√¥ng c√≥ m·ªôt ch√∫t ƒë·∫°o ƒë·ª©c n√†o. T·∫°i sao b·∫°n l·∫°i d√πng l·ªánh n√†y?? B·∫°n kh√¥ng ƒë·ªß t∆∞ c√°ch ƒë·ªÉ n√≥i chuy·ªán v·ªõi t√¥i',
        'Xin l√† xin vƒ©nh bi·ªát c·ª•',
        'Th·∫ø b·∫°n n√≥i xem v√¨ sao m√¨nh ph·∫£i tr·∫£ l·ªùi b·∫°n - Peanutss Chen',
        'ChaÃÄo em, chiÃ£ laÃÄ luaÃ£ÃÇt suÃõ cuÃâa army vaÃÄ ƒëaÃÉ thu thaÃ£ÃÇp ƒëuÃâ baÃÜÃÄng chuÃõÃÅng em xuÃÅc phaÃ£m army cuÃâa coÃÇng ty beÃÇn chiÃ£. Em vui loÃÄng xoÃÅa baÃÄi naÃÄy sau 30 phuÃÅt. NeÃÇÃÅu sau 30 phuÃÅt maÃÄ em vaÃÇÃÉn chuÃõa xoÃÅa baÃÄi thiÃÄ beÃÇn chiÃ£ seÃÉ duÃÄng toÃõÃÅi phaÃÅp luaÃ£ÃÇt vaÃÄ em seÃÉ biÃ£ loÃÇi ƒëaÃÇÃÄu ra CoÃÇn ƒêaÃâo !'
        'C√ÅC B·∫†N NH√ÇN VI√äN ∆†I, C√ÅC B·∫†N H·ªñ TR·ª¢ M√åNH V·ªöI. C√ÅC B·∫†N ∆†I C√ÅC B·∫†N ƒê∆ØA NH·∫¶M ƒê·ªí CHO M√åNH C√ÅC B·∫†N ∆†I. C√ÅC B·∫†N NH√ÇN VI√äN H·ªñ TR·ª¢ ∆†I. C√ÅC B·∫†N H·ªñ TR·ª¢ M√åNH KH√îNG C√ÅC B·∫†N ∆†I. C√ÅC B·∫†N ƒêI·∫æC √Ä C√ÅC B·∫†N ∆†I H·ªñ TR·ª¢ M√åNH KH√îNG C√ÅC B·∫†N ∆†I.'
        'Trong tr∆∞·ªùng h·ª£p anh b·ªã say ƒë·∫Øm b·ªüi v·∫ª ƒë·∫πp quy·∫øn r≈© c·ªßa em (ho·∫∑c nh·ªØng v·∫ª ƒë·∫πp t∆∞∆°ng t·ª± c·ªßa em), anh kh·∫≥ng ƒë·ªãnh anh kh√¥ng li√™n h·ªá b·ªüi b·∫•t c·ª© m·ªôt c√¥ g√°i kh√°c n√†o trong nh√≥m n√†y, c√≥ l·∫Ω tr√°i tim c·ªßa anh ch·ªâ d√†nh cho em. Anh c≈©ng xin kh·∫≥ng ƒë·ªãnh anh kh√¥ng h·ªÅ c√≥ th·ªÉ y√™u m·ªôt c√¥ g√°i n√†o kh√°c khi ƒë√£ y√™u em..',
        '√îi b·∫°n ∆°i! B·∫°n s·ª©c ƒë·ªÅ kh√°ng k√©m l√† do b·∫°n kh√¥ng ch∆°i ƒë·ªì ƒë·∫•y b·∫°n ·∫°, n·∫øu b·∫°n ch∆°i ƒë·ªì v√†o th√¨ l√† ƒë·ªÅ kh√°ng n√≥ kh·ªèe n√≥ kh√¥ng bao gi·ªù b·ªã ·ªëm ƒë√¢u b·∫°n ·∫°, ch∆°i ƒë·ªì l√† thu·ªëc b·ªï m√† b·∫°n! B·∫°n ph·∫£i n√™n nh·ªõ nh√°, c√°i vi√™n thu·ªëc b√¨nh th∆∞·ªùng, c√°i vi·∫øt thu·ªëc ACID B1 b·∫°n mua c√≥ 2 ngh√¨n ƒëc m·∫•y vi√™n ƒë√∫ng k ? Ho·∫∑c l√† 10 ngh√¨n 1 vi√™n, 10 ngh√¨n 1 vi√™n l√† ACID B1 ƒë·∫•y , ƒë√∫ng kh√¥ng? Th·∫ø ƒë√¢y nh·ªØng vi√™n thu·ªëc nh∆∞ vi√™n thu·ªëc k·∫πo, vi√™n thu·ªëc kim c∆∞∆°ng, vi√™n thu·ªëc v∆∞∆°ng li·ªám n√†y, vi√™n thu·ªëc c√°c ki·ªÉu l√†y th√¨ b·∫°n mua c√°i ƒë·∫•y v√†o 500 ngh√¨n 1 vi√™n c∆° m√†! Ch∆°i c√°i ƒë·∫•y v√†o ƒë·ªÅ kh√°ng n√≥ ph·∫£i cao h∆°n ch·ª© b·∫°n! Ch∆°i c√°i ƒë·∫•y v√†o nhi·ªÅu ƒë·ªÅ kh√°ng m√†! B·∫°n kh√¥ng ch∆°i v√†o ƒë·ªÅ kh√°ng b·∫°n k√©m l√† ph·∫£i ƒë·∫•y b·∫°n ·∫° !',
        'Theo m√¨nh th√¨ kh√¥ng n√™n ƒëƒÉng nh·ªØng b√†i nh∆∞ th·∫ø n√†y. C√°i x·∫•u xa, m√¨nh ph·∫£i qu√™n n√≥ ƒëi, cho n√≥ m·∫•t d·∫ßn. K n√™n nh·∫Øc l·∫°i. Ng t·ªët s·∫Ω b·ªã √°m ·∫£nh, k t·ªët cho tinh th·∫ßn, ng x·∫•u s·∫Ω ghi nh·∫≠n. Ng k hi·ªÉu bi·∫øt s·∫Ω ghi nh·ªõ. V√† n·∫øu nh√≥m c√≤n ƒëƒÉng nhi·ªÅu b√†i nh∆∞ t‚Ä¶ th·∫ø n√†y th√¨ m√¨nh s·∫Ω r·ªùi nh√≥m. Cu·ªôc s·ªëng r·∫•t ng·∫Øn ng·ªßi, t·∫°i sao ph·∫£i ƒë·ªÉ t√¢m ƒë·∫øn ƒëi·ªÅu c·∫ßn qu√™n ƒëi. H√£y s·ªëng t√≠ch c·ª±c v√† t∆∞∆°i s√°ng.'
    ]
    response = random.choice(peabot_rep)
    await interaction.response.send_message(response)


    
######
@tree.command(name="wikipedia", description = "T√¨m ki·∫øm th√¥ng tin tr√™n Wikipedia")
async def wiki(interaction: discord.Interaction, ngon_ngu: str, noi_dung: str):
    if ngon_ngu == 'Ti·∫øng Vi·ªát':
        ngon_ngu = 'vi'
    if ngon_ngu == 'Ti·∫øng Anh':
        ngon_ngu = 'en'
    wikipedia.set_lang(f'{ngon_ngu}')
    try:
        # m√†u xanh
        r_color = 124
        g_color = 252
        b_color = 0
        result = wikipedia.summary(f"{noi_dung}")
    except:
        # m√†u ƒë·ªè
        r_color = 255
        g_color = 0
        b_color = 0
        result = "L·ªói khi nh·∫≠p t·ª´ kh√≥a! Vui l√≤ng nh·∫≠p ch√≠nh x√°c t·ª´ kh√≥a b·∫°n c·∫ßn t√¨m"

    wikiembed = discord.Embed(
        title = f'K·∫øt qu·∫£ t√¨m ki·∫øm "{noi_dung}" tr√™n Wikipedia:', 
        description = result, 
        color = discord.Color.from_rgb(r_color, g_color, b_color)
        ) 
    wikiembed.set_footer (text = f'L·ªánh ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi: {interaction.user}  ‚Ä¢  N·ªôi dung ƒë∆∞·ª£c tr√≠ch t·ª´ wikipedia.org')
    try:
        await interaction.response.send_message(embed = wikiembed, ephemeral = False)    
    except:
        await interaction.response.send_message("H√¨nh nh∆∞ c√≥ l·ªói g√¨ ƒë√≥ r·ªìi!", ephemeral = False)   


@wiki.autocomplete('ngon_ngu')
async def wiki_autocomplete(
    interaction: discord.Interaction,
    current: str,
) -> List[app_commands.Choice[str]]:
    ngon_ngu = ['Ti·∫øng Vi·ªát','Ti·∫øng Anh']
    return [
        app_commands.Choice(name=wiki1, value=wiki1)
        for wiki1 in ngon_ngu if current.lower() in wiki1.lower()
        ]

#####



#@tree.command(name="kick", description = "Kick m·ªôt member n√†o ƒë√≥",)
##@commands.has_permissions(kick_members = True, administrator = True)
#async def kick(interaction: discord.Interaction, user : discord.Member, li_do: str):#
   # if user.id == interaction.user.id:
   #     print("1 ch·∫°y")
   #     await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ t·ª± kick ch√≠nh m√¨nh!!")
   # elif user.guild_permissions.administrator:
   #     print("2 ch·∫°y")
   #     await interaction.response.send_message("∆† k√¨a anh b·∫°n, b·∫°n kh√¥ng th·ªÉ kick ƒë∆∞·ª£c Admin ƒë√¢u :))", ephemeral = False)
   # elif isinstance(interaction, MissingPermissions):
   #     print("3 ch·∫°y")
   #     await interaction.response.send_message("B·∫°n c·∫ßn c√≥ quy·ªÅn **Kick Member** v√† **Admin**!!", ephemeral = False)
   # elif commands.has_permissions(kick_members = True, administrator = True): 
   #     print("4 ch·∫°y")
   #     await interaction.response.send_message(f"**{user}** ƒë√£ b·ªã kick kh·ªèi server! \nL√≠ do: **{li_do}**", ephemeral = False)
   #     await user.kick(reason=li_do)
   # else:
   #     print("5 ch·∫°y")
   #     await interaction.response.send_message("Bot kh√¥ng ƒë∆∞·ª£c c·∫•p quy·ªÅn Kick Member - Admin, vui l√≤ng ƒëi·ªÅu ch·ªânh quy·ªÅn h·∫°n c·ªßa bot trong c√†i ƒë·∫∑t server", ephemeral = False)
       

#@tree.command(name="test", description = "...",)
#async def self(interaction: discord.Interaction):
#    if commands.has_permissions(mod = True) == True:#
  #      await interaction.response.send_message("c√≥")
    # else:
     #   await interaction.response.send_message("kh√¥ng")

#@kick.error
#async def kick_error(interaction ,error):
#   if isinstance(error, MissingPermissions):
#       await interaction.response.send_message("B·∫°n c·∫ßn c√≥ quy·ªÅn **Kick Member** v√† **Admin**!!")
#   else:
#       await interaction.response.send_message("ƒê√£ c√≥ l·ªói!")
#      raise error


#run
client.run(TOKEN) 
